<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Krzysiek's tech corner</title><link>https://krzysi3k.github.io/post/</link><description>Recent content in Posts on Krzysiek's tech corner</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 27 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://krzysi3k.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Obsidian + Codex CLI and MCP server</title><link>https://krzysi3k.github.io/post/2025/10/obsidian-with-mcp/</link><pubDate>Mon, 27 Oct 2025 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2025/10/obsidian-with-mcp/</guid><description>&lt;h4 id="ㅤ">ㅤ&lt;/h4>
&lt;h4 id="ㅤ-1">ㅤ&lt;/h4>
&lt;h2 id="manage-obsidian-docs-using-mcp-server-and-codex-cli">Manage Obsidian docs using MCP server and Codex CLI&lt;/h2>
&lt;p>This is second part of integrating AI tools with local documentation, check out first part about: &lt;a href="https://krzysi3k.github.io/post/2025/10/obsidian-with-rag">CLI with Retrieval Augmented Generation + Obsidian docs&lt;/a>&lt;/p>
&lt;h3 id="what-is-mcp-brief-overview">What is MCP brief overview&lt;/h3>
&lt;p>Model Context Protocol (MCP) is an open standard developed by Anthropic that enables AI assistants to securely connect to and interact with external data sources and tools in real-time.
MCP acts as a bridge between AI models and various external systems, allowing the AI to:&lt;/p></description></item><item><title>Obsidian + CLI with RAG</title><link>https://krzysi3k.github.io/post/2025/10/obsidian-with-rag/</link><pubDate>Sun, 26 Oct 2025 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2025/10/obsidian-with-rag/</guid><description>&lt;h4 id="ㅤ">ㅤ&lt;/h4>
&lt;h4 id="ㅤ-1">ㅤ&lt;/h4>
&lt;h2 id="integrate-ai-cli-with-obsidian-knowledgebase">Integrate AI CLI with Obsidian knowledgebase&lt;/h2>
&lt;h3 id="robust-cli-with-rag-capabilities">robust CLI with RAG capabilities&lt;/h3>
&lt;p>AIChat is a comprehensive, all-in-one command-line interface (CLI) tool designed to facilitate efficient interaction with large language models (LLMs) and streamline AI-driven workflows across multiple platforms and providers.&lt;br>
AIChat supports integration with over 20 leading LLM providers through a single interface, enabling users to switch or compare models seamlessly without needing to manage separate APIs or environments.&lt;/p></description></item><item><title>Instrument your chatbot with new OpenAI model</title><link>https://krzysi3k.github.io/post/2024/07/gpt-4o/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2024/07/gpt-4o/</guid><description>&lt;h4 id="ㅤ">ㅤ&lt;/h4>
&lt;h2 id="make-your-chatbot-faster-and-more-comprehensive-with-new-ai-model-from-openai">Make your chatbot faster and more comprehensive with new AI model from OpenAI&lt;/h2>
&lt;p>This is going to be follow-up post to &amp;ldquo;&lt;em>Self hosted ChatGPT with Cloudflare tunnel and Mattermost&lt;/em>&amp;rdquo; so please first read following &lt;strong>&lt;a href="https://krzysi3k.github.io/post/2023/05/chatgpt/">blog post&lt;/a>&lt;/strong>.&lt;/p>
&lt;p>Today, I&amp;rsquo;m going to test OpenAI&amp;rsquo;s latest iteration in the GPT series: GPT-4o. This model represents a continuation of OpenAI&amp;rsquo;s efforts to refine and improve their language models. I will also show how to switch between GPT-4o and GPT4-Turbo in chatbot using predefined commands / flags, and set desired Model temperature (temperature parameter in GPT models controls the randomness of the model&amp;rsquo;s output. It is a floating-point value that typically ranges from 0 to 1)&lt;/p></description></item><item><title>Self hosted ChatGPT with Cloudflare tunnel and Mattermost</title><link>https://krzysi3k.github.io/post/2023/05/chatgpt/</link><pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2023/05/chatgpt/</guid><description>&lt;h3 id="selfhosted-chatgpt-accessible-from-anywhere-you-want">Selfhosted ChatGPT accessible from anywhere you want&lt;/h3>
&lt;p>In this post I&amp;rsquo;ll show you how I built selfhosted version of ChatGPT that is more user friendly and also way cheaper!
Entire solution is created with following components:&lt;/p>
&lt;ul>
&lt;li>Cloudflare tunnel (in my case I&amp;rsquo;m using cloudflared Docker image)&lt;/li>
&lt;li>Mattermost (opensource alternative to slack)&lt;/li>
&lt;li>Python bot (application uses OpenAI library as well as Mattermost bot client)&lt;/li>
&lt;li>Own domain (could be a cheap domain, but this required in order to use tunnel and expose it securely to the internet)&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s briefly describe each component for those who are unaware what they suppose to do:&lt;/p></description></item><item><title>Wake on LAN from anywhere with esp8266 microcontroller</title><link>https://krzysi3k.github.io/post/2023/05/wol/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2023/05/wol/</guid><description>&lt;h3 id="why-do-i-need-wake-on-lan">Why do I need Wake On Lan&lt;/h3>
&lt;p>Wake on LAN (WoL) is a feature that allows a computer to be turned on remotely over a network connection. This is useful for situations where a computer needs to be accessed or controlled when it is not physically accessible. WoL works by sending a special network packet, called a Magic Packet, to the computer&amp;rsquo;s network interface card (NIC). The Magic Packet contains the computer&amp;rsquo;s MAC address and a specific sequence of bytes that the NIC recognizes as a signal to wake up the computer.
When the NIC receives the Magic Packet, it sends a signal to the computer&amp;rsquo;s power management system to turn on the computer. The computer then boots up as if the power button had been pressed.
This is quite important because most consumer grade computers will not boot up automatically after power outage. Wake on lan over internet can solve such issues by powering on machine remotely.&lt;/p></description></item><item><title>Building microservice in Python</title><link>https://krzysi3k.github.io/post/2021/06/fastapi/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2021/06/fastapi/</guid><description>&lt;h4 id="ㅤ">ㅤ&lt;/h4>
&lt;h3 id="automate-your-workflow-with-simple-microservice-built-in-python">Automate your workflow with simple microservice built in Python&lt;/h3>
&lt;p>having an own custom microservice that exposes one or multiple HTTP endpoints is very useful when taking some actions (executing tasks) or serving data from database. As a DevOps engineers we are always trying to automate repeatable tasks in order to achieve the end result, improve productivity and remove human errors to the absolute minimum. Such services are quite popular in an &lt;a href="https://en.wikipedia.org/wiki/Event-driven_architecture">event driven architectures&lt;/a> when you want to run specific workload based on an event (HTTP call, new Pull request, logon failure, etc.)&lt;/p></description></item><item><title>How I built my Blog with CI/CD Pipelines</title><link>https://krzysi3k.github.io/post/2021/06/gh-actions/</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2021/06/gh-actions/</guid><description>&lt;h4 id="ㅤ">ㅤ&lt;/h4>
&lt;h3 id="build-your-web-application-and-publish-new-content-automatically">Build your web application and publish new content automatically&lt;/h3>
&lt;p>In this post I will describe how I publish new content for my blog and how it&amp;rsquo;s deployed to Github pages where it is actually hosted.&lt;/p>
&lt;h3 id="static-site-generators">Static Site Generators&lt;/h3>
&lt;p>This blog is powered by static site generator called &lt;a href="https://gohugo.io/">Hugo&lt;/a> which is quite popular and definitely one of the fastest among other generators. While at the first glance static site might look exactly the same as the traditional website like Wordpress for instance - There are huge differences between them from the backend perspective. First of all static sites don&amp;rsquo;t need database - all information is pre-rendered and then stored on disk. Usually all the website content is created in Markdown files, and then it is rendered to create all necessary files (html, javascript, css, etc.) using CLI provided by generator. Hugo allows to run web server on your localhost to see how your website is going to look like when it is deployed.&lt;/p></description></item><item><title>Instant push notifications with Slack Bot API</title><link>https://krzysi3k.github.io/post/2021/05/slack-api/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2021/05/slack-api/</guid><description>&lt;h3 id="slack-bot-api---push-notifications-for-pcsmartphone">Slack Bot API - push notifications for PC/smartphone&lt;/h3>
&lt;p>Hello,&lt;br>
this is going to be a follow-up post to the &lt;a href="https://krzysi3k.github.io/post/2021/05/mqtt-broker/">MQTT broker post&lt;/a> where I described quite extensively how to handle MQTT messages, but I haven&amp;rsquo;t described how to receive messages on smartphone or PC.
&lt;a href="https://slack.com/">Slack&lt;/a> is quite popular collaboration tool, it is the main competitor to &lt;a href="https://teams.microsoft.com/">Microsoft Teams&lt;/a>. Besides standard features like calling/messaging/file sharing It also has very rich API for developers and third party applications. Slack has free and paid plans, for personal use and even small businesses free plan is probably enough for enterprise level applications there are few paid plans that you can check &lt;a href="https://slack.com/intl/en-pl/pricing">here&lt;/a>&lt;/p></description></item><item><title>MQTT broker - central point for your home automation</title><link>https://krzysi3k.github.io/post/2021/05/mqtt-broker/</link><pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2021/05/mqtt-broker/</guid><description>&lt;h3 id="mqtt---lightweight-pubsub-message-broker">MQTT - Lightweight pub/sub message broker&lt;/h3>
&lt;p>MQTT is a standard messaging protocol for IoT devices - it implements publish/subscribe model, which in short is asynchronous communication system that allow to receive any published messages for all devices that are subscribed to the topic. It has vast usage in communication of IoT devices, due to high performance and low bandwidth usage. Most devices sold by different manufactures can be configured to communicate via MQTT or HTTP REST service and at the same time they are hooked to 3rd party IoT platforms like TUYA for instance (in order to access the device from the Internet). Fortunately you can change that and configure the device to run within your home network, all you need to do is to flash different firmware, but you need to know that it will void the warranty most of the time. If you are concerned about privacy I will show you in this post how to configure and connect your devices to your MQTT broker without third party platforms like TUYA and make them available even if you are outside of your home network.&lt;/p></description></item><item><title>My favorite metrics monitoring stack</title><link>https://krzysi3k.github.io/post/2021/05/metrics/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2021/05/metrics/</guid><description>&lt;p>If you want to build monitoring for your infrastructure/applications + you want to have proper visualization then you have multiple options. I can see that there is more and more comprehensive tools on the market that allows you to implement end-to-end monitoring for your infra and applications.&lt;/p>
&lt;h3 id="monolith-vs-microservices">Monolith vs Microservices&lt;/h3>
&lt;p>Now I need to mention that I have been working with different tools including very big monolith software
like &lt;a href="https://docs.microsoft.com/en-us/system-center/scom/welcome?view=sc-om-2019">SCOM&lt;/a> (System Center Operations Manager) It is quite powerful solution from Microsoft that is mostly used in On-Prem environments, it is capable to monitor different OS types (Linux/Windows/AIX) and can run custom workloads and scripts written in various languages - powershell, bash, perl etc, additionally there are ready to use Management Packs for some specific solutions like SharePoint for instance. One of the biggest problem with SCOM is it requires powerful servers to handle that workload, also it uses classic relational DB (MSSQL) so it very difficult to scale horizontally, and setup monitoring configuration is not an easy task - you need to know Visual Studio, VSAE - an authoring extension for VS, and not be afraid of large XML files some of them are &amp;gt; 10k lines of code. Also documentation available is very poor, especially for advanced topics like Authoring Management Packs.
It&amp;rsquo;s worth to mention that SCOM solution in cloud will cost you a fortune (large VMs - at least 4vcpu and 16gb RAM for management servers and even larger for DB and DW, MSSQL itself is also quite expensive and you can&amp;rsquo;t choose different database engine), so for a many customers who decided to move to Cloud using &amp;ldquo;Lift and Shift&amp;rdquo; approach is not an option. Even Microsoft that was using SCOM to monitor Azure infrastructure - completely replaced that and built new solution called Azure Monitor, more info here: &lt;a href="https://www.microsoft.com/en-us/itshowcase/how-microsoft-moved-from-system-center-operations-manager-to-azure-monitoring">How Microsoft replaced SCOM with Azure Monitor&lt;/a>. With that being said we can conclude that SCOM is fading away for the good. But there are much better solutions that are not only more suitable for Cloud but also much more flexible and efficient, Let&amp;rsquo;s talk about some of them.&lt;/p></description></item><item><title>Lift off! We have a lift off</title><link>https://krzysi3k.github.io/post/2021/05/first-post/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://krzysi3k.github.io/post/2021/05/first-post/</guid><description>&lt;h3 id="printhello-world">print(&amp;lsquo;Hello World&amp;rsquo;)&lt;/h3>
&lt;p>I launched blog and this is my first post. Hopefully I will be posting here on regular basis. I will try to focus on different technical areas like DevOps, Back-end engineering, Cloud computing, IoT and SpaceX / NASA exploration. Stay tuned!&lt;/p></description></item></channel></rss>